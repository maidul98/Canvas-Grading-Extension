{"version":3,"sources":["components/LoadingIcon.js","components/grader/CommentsModal.js","components/grader/DownloadModal.js","components/grader/bulk_edit/ExtendedSubmissionView.js","components/grader/bulk_edit/BasicSubmissionView.js","userContext.js","components/grader/Submissions.js","components/grader/GraderDashboard.js","components/grader/DetailedAssignmentView.js","components/NavigationMenu.js","components/Professor/WorkLoadModal.js","components/Professor/Dashboard.js","components/Welcome.js","components/Settings.js","App.js","index.js","config.js"],"names":["LoadingIcon","id","Spinner","animation","size","Component","CommentsModal","props","useState","show","setShow","handleClose","onClick","href","Modal","centered","onHide","Header","closeButton","Body","comments","map","comment","className","src","author","avatar_image_url","alt","Footer","Button","variant","attachments","attachment","url","filename","ExtendedSubmissionView","data","user","login_id","console","log","type","data-grade","user_id","ref","input","gradeInput","current","name","defaultValue","score","onChange","event","handleCommentGrade","data-comment","placeholder","submission_comments","BasicSubmissionView","displayName","is_graded","loading","assignment_id","undefined","UserContext","createContext","Submissions","useContext","alert","useAlert","gradesAndComments","useRef","assignedSubmissions","useRequest","axios","manual","onSuccess","result","params","a","length","showControls","removeAll","user_ids","submission","push","singleSubmissionFetch","run","downloadObject","setDownloadGraderIds","onError","error","formatResult","response","initialData","netid","method","endpoint","fetchKey","submitGrades","net_id","fetch","credentials","headers","body","JSON","stringify","status","success","useEffect","some","submissionInArray","index","findIndex","target","value","document","querySelector","Object","values","fetches","res","key","bulk_edit","graded_at","keys","FileSaver","require","AssignmentList","assignments","setAssignments","setBulk_edit","current_assignment_id","setCurrent_assignment_id","setShowControls","downloadGraderIds","fetchAssignments","downloadBulkSubmissions","responseType","zip","Blob","saveAs","disabled","as","role","aria-hidden","e","assignment_name","DetailedAssignmentView","match","student_id","class","NavigationMenu","Dropdown","Toggle","Menu","Item","submissions","setSubmissions","config","header","json","Dashboard","graderEditObject","setGraderEditObject","setAssignment_id","getUngradedsubs","fetchAssignmentsList","fetchGradersData","syncWithCanvas","message","handleUpdate","grader_id","oldGraderEditObject","graders","gradersArray","parseInt","new_grader","runDisturbation","updateGraderDetails","DropdownButton","title","onSelect","evt","eventKey","handleDropdown","assignment","Table","bordered","hover","grader","FormControl","weight","min","pattern","offset","cap","total_assigned_for_assignment","ProgressBar","animated","now","progress","label","num_graded","num_unassigned","Welcome","parameterName","tmp","location","search","substr","split","forEach","item","decodeURIComponent","findGetParameter","info","Settings","bearToken","setBearToken","deleteCourseConfirm","setDeleteCourseConfirm","courseId","setCourseId","updateCanvasToken","resetCourse","updateCourse","getCourseId","course_id","App","setUser","then","catch","Provider","path","component","exact","GraderDashboard","options","position","positions","BOTTOM_CENTER","timeout","transition","transitions","FADE","interceptors","request","use","withCredentials","Promise","reject","window","pathname","Root","template","AlertTemplate","render","getElementById","module","exports","backend"],"mappings":"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","file":"static/js/main.267f6649.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\n/*\r\n    Displays loading icon while information is being processed.\r\n*/\r\nclass LoadingIcon extends Component {\r\n    render() {\r\n        return (\r\n            <div id=\"overlay\"> <div id=\"spinner_icon\"> <Spinner animation=\"border\" size=\"lg\" /> </div> </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoadingIcon;\r\n","import React, {useState} from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal'\r\n\r\nexport default function CommentsModal(props){\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true)\r\n\r\n    return(\r\n        <>\r\n            <a onClick={handleShow} href=\"#\">\r\n                Past comments\r\n            </a>\r\n            <Modal centered show={show}  animation={false} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {props.comments?.map((comment)=>\r\n                        <div className=\"comment\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-sm-2\">\r\n                                    <img src={comment?.author.avatar_image_url} alt=\"\"/>\r\n                                </div>\r\n                                <div className=\"col-sm-10\">\r\n                                    <p>{comment.comment}</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleClose}>\r\n                    Close\r\n                </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal'\r\n\r\nexport default function CommentsModal(props){\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true)\r\n\r\n    return(\r\n        <>\r\n            <a onClick={handleShow} href=\"#\">\r\n                Attachments\r\n            </a>\r\n            <Modal centered show={show}  animation={false} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {props.attachments?.map((attachment)=>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-sm-2\">\r\n                                <a href={attachment.url}>\r\n                                    <img src=\"https://img.icons8.com/ios/50/000000/download.png\" alt=\"\"/>\r\n                                </a>\r\n                            </div>\r\n                            <div className=\"col-sm-10\">\r\n                                <p className=\"vir-center-download-img\" ><a href={attachment.url}>{attachment.filename}</a></p>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleClose}>\r\n                    Close\r\n                </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport CommentsModal from '../CommentsModal'\r\nimport DownloadModal from '../DownloadModal'\r\n\r\nexport default function ExtendedSubmissionView(props){\r\n\r\n    return(\r\n        <div className=\"quick-edit-submission\">\r\n            <div id=\"name-grade-container\">\r\n                <div id=\"student_name\">\r\n                    {props.data?.user?.login_id}\r\n                </div>\r\n                <div id=\"grade_input\">\r\n                    <span className=\"out-of-text\">Grade out of 100</span>\r\n                    {console.log(props.data)}\r\n                    <input type=\"text\" data-grade={props.data?.user_id} \r\n                    ref={input => props.gradeInput.current = input} \r\n                    name=\"assigned_grade\" defaultValue={props.data?.score} \r\n                    onChange={(event)=>props.handleCommentGrade(props.data?.user_id, event, 'grade')} \r\n                    type=\"number\" min={0} max={100}/>\r\n\r\n                </div>\r\n            </div>\r\n            <textarea\r\n            name=\"comment\" \r\n            data-comment={props.data?.user_id} \r\n            type=\"text\" \r\n            placeholder=\"Enter feedback here\" \r\n            className=\"feedback-form\"  \r\n            onChange={(event)=>props.handleCommentGrade(props.data?.user_id, event, 'comment')}>\r\n            </textarea>\r\n            \r\n            <div className=\"submission_actions\">\r\n                <ul>\r\n                    <li><CommentsModal comments={props.data?.submission_comments}/></li>\r\n                    <li><DownloadModal attachments={props.data?.attachments}/></li>\r\n                </ul>\r\n            </div> \r\n\r\n        </div>\r\n    )\r\n\r\n}","import React from 'react';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nexport default function BasicSubmissionView({ displayName, user_id, is_graded, loading, assignment_id }) {\r\n    return (\r\n        <div className=\"assignment\">\r\n            <div className=\"student-name\">\r\n                {loading ? <Spinner animation=\"grow\" /> : <></>}\r\n                {\r\n                    assignment_id ?\r\n                        <a href={'/assignments/' + assignment_id + '/' + user_id}>{displayName}</a>\r\n                        :\r\n                        <>{user_id}</>\r\n                }\r\n            </div>\r\n            {is_graded === null | is_graded === undefined | is_graded == 0\r\n                ?\r\n                <div className=\"grade-status\">\r\n                    <div className=\"grade-icon-red\"></div>\r\n                </div>\r\n                :\r\n                <div className=\"grade-status\">\r\n                    <div className=\"grade-icon\"></div>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n\r\n}","import { createContext } from 'react';\r\n\r\nexport const UserContext = createContext(null);","import React, { useEffect, useRef, useState, useContext } from 'react';\r\nimport LoadingIcon from '../LoadingIcon';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { useRequest } from '@umijs/hooks';\r\nimport { useAlert } from 'react-alert'\r\nimport ExtendedSubmissionView from './bulk_edit/ExtendedSubmissionView'\r\nimport BasicSubmissionView from './bulk_edit/BasicSubmissionView';\r\nimport config from '../../config'\r\nimport { UserContext } from '../../userContext';\r\nimport axios from 'axios'\r\n\r\nexport default function Submissions(props) {\r\n    let user = useContext(UserContext)\r\n    const alert = useAlert();\r\n    const gradesAndComments = useRef([]);\r\n    const gradeInput = useRef();\r\n\r\n    /**\r\n     * Get all of the submissions that are tasked for this grader from distribution algo \r\n     */\r\n    const assignedSubmissions = useRequest(() => {\r\n        return axios(`/api/get-assigned-submissions-for-assigment?user_id=${user?.id}&assigment_id=${props.assignment_id}`)\r\n    }, {\r\n        manual: true,\r\n        onSuccess: async (result, params) => {\r\n            if (result.length == 0) {\r\n                alert.show('You have no assigned submissions for this assignment yet')\r\n                props.showControls(false)\r\n            } else {\r\n                alert.removeAll()\r\n                let user_ids = [] // [user_id, net_id]\r\n                result.map((submission) => {//concurrently pull all submission for quick edit\r\n                    user_ids.push([submission['user_id'], submission['name']])\r\n                    singleSubmissionFetch.run(submission['user_id'], submission['name'])\r\n                });\r\n                let downloadObject = {\r\n                    \"assignment_id\": props.assignment_id,\r\n                    \"user_ids\": user_ids,\r\n                    \"grader_id\": user?.id // will be dynmaic \r\n                }\r\n                props.setDownloadGraderIds(downloadObject)\r\n\r\n                props.showControls(true)\r\n            }\r\n        },\r\n        onError: (error, params) => {\r\n            alert.error('Something went wrong when pulling your submissions, please try refreshing the page.')\r\n        },\r\n        formatResult: (response) => {\r\n            return [...response.data]\r\n        },\r\n        initialData: []\r\n    })\r\n\r\n    /**\r\n     * Get grades and comments for quick edit from canvas\r\n    */\r\n    const singleSubmissionFetch = useRequest(async (user_id, netid) => {\r\n        return axios({\r\n            url: `/api/canvas-api`,\r\n            method: \"POST\",\r\n            data: { endpoint: `assignments/${props.assignment_id}/submissions/${user_id}?include[]=user&include[]=submission_comments` }\r\n        })\r\n    }, {\r\n        manual: true,\r\n        initialData: [],\r\n        fetchKey: id => id,\r\n        formatResult: [],\r\n        onError: (error, params) => {\r\n            alert.error(`${error.response.data}`)\r\n        },\r\n        formatResult: (response) => {\r\n            return response.data\r\n        }\r\n    });\r\n\r\n\r\n    /**\r\n     * Submit all of the submission edits changed their values \r\n     */\r\n\r\n\r\n    const submitGrades = useRequest(async (user_id, net_id) => {\r\n        return fetch(`/api/upload-submission-grades/assignments/${props.assignment_id}/submissions/batch-update-grades`, {\r\n            method: \"POST\",\r\n            credentials: \"include\",\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json',\r\n                \"Access-Control-Allow-Credentials\": true\r\n            },\r\n            body: JSON.stringify(gradesAndComments.current)\r\n        })\r\n    }, {\r\n        manual: true,\r\n        onSuccess: async (response, params) => {\r\n            if (response.status == 200) {\r\n                gradesAndComments.current = []\r\n                alert.success('Your feedback has been submitted successfully')\r\n            } else {\r\n                alert.error('Grades were not saved. Please try again or update your Canvas token')\r\n            }\r\n        },\r\n        onError: (error, params) => {\r\n            alert.error('Something went wrong, while processing your request. Please try again in a few minutes')\r\n        }\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        assignedSubmissions.run(`/api/get-assigned-submissions-for-assigment?user_id=1&assigment_id=` + props.assignment_id);\r\n    }, [props.assignment_id]);\r\n\r\n\r\n    /**\r\n     * \r\n     * @param {*} id \r\n     * @param {*} event \r\n     * @param {*} type \r\n     */\r\n    const handleCommentGrade = (id, event, type) => {\r\n        let found = gradesAndComments.current.some(submissionInArray => submissionInArray.id == id)\r\n        if (found) {\r\n            let index = gradesAndComments.current.findIndex(submissionInArray => submissionInArray.id == id);\r\n            gradesAndComments.current[index][type == 'grade' ? \"assigned_grade\" : 'comment'] = event.target.value\r\n        } else {\r\n            gradesAndComments.current.push({\r\n                'id': id,\r\n                'assigned_grade': document.querySelector(`[data-grade='${id}']`).value,\r\n                'comment': document.querySelector(`[data-comment='${id}']`).value,\r\n                'is_group_comment': false,\r\n            })\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Submit the quick edit grades for only the submissions for which the grade has changed\r\n     */\r\n    const submitForms = () => {\r\n        if (Object.keys(gradesAndComments)) {\r\n            submitGrades.run()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {submitGrades?.loading | assignedSubmissions?.loading ? <LoadingIcon /> : null}\r\n            {Object.values(singleSubmissionFetch?.fetches).map(res =>\r\n                <div key={res.data?.id}>\r\n                    {\r\n                        (props.bulk_edit)\r\n                            ?\r\n                            <ExtendedSubmissionView\r\n                                data={res.data}\r\n                                gradeInput={gradeInput}\r\n                                handleCommentGrade={handleCommentGrade}\r\n                            />\r\n                            :\r\n                            <BasicSubmissionView user_id={res?.data?.user?.id} displayName={res?.data?.user?.login_id} assignment_id={res?.data?.assignment_id} is_graded={res?.data?.graded_at} loading={res.loading} />\r\n                    }\r\n                </div>)\r\n            }\r\n            <Button onClick={submitForms} className={`float-right ${props.bulk_edit ? `visible` : `invisible`}`}>Submit feedback</Button>\r\n            <div className=\"clear-fix\"></div>\r\n        </div>\r\n    );\r\n}\r\n","import React, {useEffect, useState} from 'react';\r\nimport { useRequest } from '@umijs/hooks';\r\nimport LoadingIcon from '../LoadingIcon';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Submissions from './Submissions';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport config from '../../config';\r\nimport axios from 'axios';\r\nimport { useAlert } from 'react-alert'\r\nlet FileSaver = require('file-saver');\r\n\r\n\r\n\r\nexport default function AssignmentList() {\r\n    const [assignments, setAssignments] = useState([]);\r\n    const [bulk_edit, setBulk_edit]     = useState(false);\r\n    const [current_assignment_id, setCurrent_assignment_id] = useState(0);\r\n    const [showControls, setShowControls] = useState(false);\r\n    const [downloadGraderIds, setDownloadGraderIds] = useState({});\r\n    const alert = useAlert();\r\n\r\n    /**\r\n     * Get the list of assignments from Canvas  \r\n     */\r\n    const fetchAssignments = useRequest(()=>{\r\n        return axios(`/api/get-all-assignments`);\r\n    }, {\r\n        manual: true,\r\n        onSuccess: (data) => {\r\n            setAssignments(data);\r\n            if(data.length!=0){\r\n                setCurrent_assignment_id(data[0].assignment_id);\r\n            }\r\n        },\r\n        formatResult: (response) => {\r\n            return [...response.data];\r\n        },\r\n        initialData: []\r\n    });\r\n\r\n    /**\r\n     * Takes in a list of users for a assignment ID and returns a blob or\r\n     * returns an error otherwise. \r\n     */\r\n    const downloadBulkSubmissions = useRequest(()=>{\r\n        return axios({url:`/api/download-submission`,\r\n            method: 'POST', \r\n            responseType: 'arraybuffer', \r\n            data: downloadGraderIds\r\n        });\r\n    },{\r\n        manual: true,\r\n        onSuccess: async (response) => {\r\n            let zip = new Blob([response.data]);\r\n            FileSaver.saveAs(zip, 'Submissions.zip');\r\n        },\r\n        onError: async (error) => {\r\n            alert.error('Something went wrong, please try again later')\r\n        },\r\n    });\r\n\r\n    useEffect(()=>{\r\n        fetchAssignments.run();\r\n    },[]);\r\n\r\n    if(fetchAssignments.loading) return <LoadingIcon />;\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div>\r\n                {\r\n                    showControls\r\n                        ?\r\n                        <>\r\n                            <Button variant=\"secondary\" disabled={fetchAssignments.loading} className=\"float-right\" size=\"lg\" onClick={()=>setBulk_edit(!bulk_edit)} >{bulk_edit?'Back':'Bulk edit'}</Button>\r\n                            <Button id=\"download-buttn\" disabled={downloadBulkSubmissions.loading?true:false} variant=\"outline-secondary\" className=\"float-right\" size=\"lg\" onClick={()=>{downloadBulkSubmissions.run();} }> \r\n                            Download\r\n                                {\r\n                                    downloadBulkSubmissions.loading\r\n                                        ?\r\n                                        <Spinner id=\"downloadBtnSpinner\" as=\"span\"animation=\"border\"size=\"sm\"role=\"status\"aria-hidden=\"true\"/>\r\n                                        :\r\n                                        <></>\r\n\r\n                                }\r\n                            </Button>\r\n                        </>\r\n                        :\r\n                        <></>\r\n                }\r\n                <div className=\"clear-fix\"></div>\r\n                <div id=\"select-assignment\">\r\n                    <select id=\"dropdown-assignment-selector\" onChange={ e => setCurrent_assignment_id(e.target.value)}>\r\n                        {assignments.map((res)=> <option key={res.assignment_id} value={res.assignment_id}>{res.assignment_name}</option>)}\r\n                    </select>\r\n                </div>\r\n                <div className=\"assignments-container\">\r\n                    <Submissions\r\n                        setDownloadGraderIds={setDownloadGraderIds} \r\n                        key={current_assignment_id} \r\n                        assignment_id={current_assignment_id}\r\n                        bulk_edit={bulk_edit} \r\n                        showControls={setShowControls}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","import React, {useState, useEffect, useRef} from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { useRequest } from '@umijs/hooks';\r\nimport LoadingIcon from '../LoadingIcon';\r\nimport { useAlert } from 'react-alert'\r\nimport ExtendedSubmissionView from './bulk_edit/ExtendedSubmissionView'\r\nimport config from '../../config'\r\nimport axios from 'axios'\r\n\r\nexport default function DetailedAssignmentView(props){\r\n    const alert = useAlert();\r\n    const gradesAndComments = useRef([]);\r\n    const gradeInput = useRef();\r\n\r\n    /**\r\n     * Get grades and comments for quick edit from canvas\r\n    */\r\n    const singleSubmissionFetch = useRequest(()=>{\r\n        return axios({\r\n        url:`/api/canvas-api`,\r\n        method:'post',\r\n        data:{endpoint:`/api/assignments/${props.match.params.assignment_id}/submissions/${props.match.params.student_id}?include[]=user&include[]=submission_comments`},\r\n        })\r\n    }, {\r\n        manual: true,\r\n        initialData: [],\r\n        fetchKey: id => id,\r\n        formatResult: [],\r\n        onError: (error, params) => {\r\n            alert.error(error.response.data)\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Submit all of the submission edits changed their values \r\n     */\r\n    const submitGrades = useRequest(()=>{\r\n        return axios(`/api/upload-submission-grades/assignments/${props.match.params.assignment_id}/submissions/batch-update-grades`,{\r\n            method:\"post\",\r\n            data: gradesAndComments.current\r\n        })\r\n    }, {\r\n        manual: true,\r\n        onSuccess: async (response, params) => {\r\n            gradesAndComments.current = []\r\n            alert.success(response.data)\r\n        },\r\n        onError: (error, params) => {\r\n            alert.error(error.response.data)\r\n        }\r\n    });\r\n\r\n    /**\r\n     * On mount fetch the submission details\r\n     */\r\n    useEffect(()=>{\r\n        console.log(props)\r\n        singleSubmissionFetch.run()\r\n    }, []);\r\n    \r\n    \r\n    /**\r\n     * \r\n     * @param {*} id \r\n     * @param {*} event \r\n     * @param {*} type \r\n     */\r\n    const handleCommentGrade = (id, event, type) => {\r\n        let found = gradesAndComments.current.some(submissionInArray=> submissionInArray.id == id)\r\n        if(found){\r\n            let index = gradesAndComments.current.findIndex(submissionInArray => submissionInArray.id == id);\r\n            gradesAndComments.current[index][type == 'grade'? \"assigned_grade\": 'comment']=event.target.value\r\n        }else{\r\n            gradesAndComments.current.push({\r\n                'id':id,\r\n                'assigned_grade': document.querySelector(`[data-grade='${id}']`).value,\r\n                'comment': document.querySelector(`[data-comment='${id}']`).value,\r\n                'is_group_comment': false,\r\n            })\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Submit the quick edit grades for only the submissions for which the grade has changed\r\n     */\r\n    const submitForms = () => {\r\n        if(Object.keys(gradesAndComments)){\r\n            submitGrades.run()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div class=\"container\">\r\n            <ExtendedSubmissionView data={singleSubmissionFetch.data?.data} gradeInput={gradeInput} handleCommentGrade={handleCommentGrade}/>\r\n            <Button onClick={submitForms} className={`float-right`}>Submit feedback</Button>\r\n            <div className=\"clear-fix\"></div>\r\n        </div>\r\n    );\r\n\r\n}\r\n","import Dropdown from 'react-bootstrap/Dropdown';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useContext } from 'react'\r\nimport { UserContext } from '../userContext';\r\n/*\r\n    Creates a navigation bar for users. Allows them access to their dashboard,\r\n    settings, and logout options.\r\n*/\r\nexport default function NavigationMenu(props) {\r\n    let user = useContext(UserContext)\r\n    return (\r\n        <div>\r\n            <header id=\"navigation-container\">\r\n                <div className=\"container\">\r\n                    <div id=\"navigation-content\">\r\n                        <a href=\"/assignments\">\r\n                            <div id=\"logo\">\r\n                                <h1>Canvas grading extension</h1>\r\n                            </div>\r\n                        </a>\r\n                        <div id=\"user-profile-icon\" className={user?.name == undefined ? 'hide' : ''}>\r\n                            <Dropdown>\r\n                                <Dropdown.Toggle variant=\"link\" id=\"dropdown-basic\">\r\n                                    {`Hello, ${user?.name}`}\r\n                                </Dropdown.Toggle>\r\n                                <Dropdown.Menu>\r\n                                    <Dropdown.Item href=\"/assignments\">My workload</Dropdown.Item>\r\n                                    <Dropdown.Item href=\"/dashboard\">Dashboard</Dropdown.Item>\r\n                                    <Dropdown.Item href=\"/settings\">Setting</Dropdown.Item>\r\n                                    <Dropdown.Item href=\"/auth/logout\">Logout</Dropdown.Item>\r\n                                </Dropdown.Menu>\r\n                            </Dropdown>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport { useRequest } from '@umijs/hooks';\r\nimport LoadingIcon from '../LoadingIcon';\r\nimport { useAlert } from 'react-alert';\r\nimport BasicSubmissionView from '../grader/bulk_edit/BasicSubmissionView';\r\nimport config from '../../config';\r\n\r\nexport default function CommentsModal({user_id, assignment_id}){\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const alert = useAlert();\r\n    const [submissions, setSubmissions] = useState([]);\r\n\r\n    /**\r\n     * Get all of the submissions that are tasked for this grader from distribution algo \r\n     */\r\n    const assignedSubmissions = useRequest(async ()=>{\r\n        return fetch(`/api/get-assigned-submissions-for-assigment?user_id=${user_id}&assigment_id=`+assignment_id, config.header);\r\n    }, {\r\n        manual: true,\r\n        initialData: [],\r\n        onSuccess: async (response) => {\r\n            let data = await response.json();\r\n            setSubmissions(data);\r\n        },\r\n        onError: () => {\r\n            alert.error('Something went wrong when pulling your submissions, please try refreshing the page.');\r\n        }\r\n    });\r\n\r\n\r\n    /**\r\n     * When the view link is clicked, pull the submissions \r\n     */\r\n    const handleShow = () => {\r\n        setShow(true);\r\n        assignedSubmissions.run();\r\n    };\r\n\r\n    if(assignedSubmissions.loading) return <LoadingIcon />;\r\n\r\n    return(\r\n        <>\r\n            <a onClick={handleShow} href=\"#\">\r\n                View\r\n            </a>\r\n            <Modal centered show={show}  animation={false} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {submissions.length == 0 ? 'This grader has no submissions assigned yet': ''}\r\n                    {submissions.map((submission) =>\r\n                        <BasicSubmissionView user_id={submission['name']} is_graded={submission['is_graded']} />\r\n                    )}\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                    Close\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n}","\r\nimport React, { useRef, useState, useEffect, useContext } from 'react';\r\nimport { useRequest } from '@umijs/hooks';\r\nimport { useAlert } from 'react-alert'\r\nimport LoadingIcon from '../LoadingIcon';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Table from 'react-bootstrap/Table';\r\nimport ProgressBar from 'react-bootstrap/ProgressBar'\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport WorkLoadModal from './WorkLoadModal';\r\nimport { UserContext } from '../../userContext';\r\nimport config from '../../config';\r\nimport axios from 'axios';\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\nimport DropdownButton from 'react-bootstrap/DropdownButton'\r\n\r\nexport default function Dashboard() {\r\n    let user = useContext(UserContext)\r\n    const alert = useAlert();\r\n    const [graderEditObject, setGraderEditObject] = useState([]);\r\n    const [assignment_id, setAssignment_id] = useState(null);\r\n    const [assignments, setAssignments] = useState([]);\r\n\r\n    /**\r\n     * Get the list of unassigned submissions for seleted assigment \r\n    */\r\n   const getUngradedsubs = useRequest(() => {\r\n        return axios({ url: `/api/unassigned-submissions/${assignment_id}`})\r\n    }, {\r\n        onSuccess: (data)=>{\r\n            console.log(data)\r\n        },\r\n        onError: (error, params) => {\r\n            alert.error(\"Something happened when fetching the number of ungraded submissions\");\r\n        },\r\n        formatResult: (response) => {\r\n            return {...response.data}\r\n        },\r\n        manual: true,\r\n        initialData: {},\r\n    });\r\n\r\n    /**\r\n     * Get the list of assignments from Canvas from which the user can drop down from \r\n     */\r\n    const fetchAssignmentsList = useRequest(() => {\r\n        return axios(`/api/get-all-assignments`)\r\n    }, {\r\n        onSuccess: (result, params) => {\r\n            if (result[0]?.assignment_id != undefined) {\r\n                fetchGradersData.run(result[0].assignment_id);\r\n                setAssignment_id(result[0].assignment_id);\r\n                setAssignments(result)\r\n            }\r\n        },\r\n        onError: (error, params) => {\r\n            alert.error(\"Something went wrong while fetching assignments, please try refreshing the page\");\r\n        },\r\n        formatResult: (response) => {\r\n            return [...response.data]\r\n        },\r\n        initialData: []\r\n    });\r\n\r\n    /**\r\n     * Sync submissions, assigment caps table and assigments with Canvas\r\n     */\r\n    const syncWithCanvas = useRequest(async (type) => {\r\n        return axios(`/api/sync-with-canvas/${type}`)\r\n    }, {\r\n        manual: true,\r\n        onSuccess: (message, params) => {\r\n            alert.success(\"Synced with canvas complete\");\r\n            fetchAssignmentsList.run()\r\n            fetchGradersData.run(assignment_id);\r\n        },\r\n        onError: (error, params) => {\r\n            alert.error(error.response.data);\r\n        },\r\n        formatResult: (response) => {\r\n            return response.data\r\n        },\r\n\r\n    });\r\n\r\n    /**\r\n     * Get grader detials from DB\r\n     */\r\n    const fetchGradersData = useRequest((assignment_id) => {\r\n        return axios(`/api/get-grader-info?assignment_id=${assignment_id}`)\r\n    }, {\r\n        manual: true,\r\n        onError: (error, params) => {\r\n            alert.error('Something went wrong while fetching graders, please try refreshing the page.');\r\n        },\r\n        onSuccess: (data)=>{\r\n            getUngradedsubs.run();\r\n        },\r\n        formatResult: (response) => {\r\n            return [...response.data]\r\n        },\r\n        initialData: [],\r\n    });\r\n\r\n    /**\r\n     * When changes are detected, they are made into an object of the following form \r\n     * {assignment_id: int id: int weight: int} \r\n     * @param {obj} event \r\n     * @param {string} type \r\n     * @param {int} grader_id \r\n     */\r\n    function handleUpdate(event, type, grader_id) {\r\n        let oldGraderEditObject = graderEditObject;\r\n        let found = oldGraderEditObject.some(graders => graders.id == grader_id)\r\n        if (found) {\r\n            let index = oldGraderEditObject.findIndex(gradersArray => gradersArray.id == grader_id);\r\n            oldGraderEditObject[index][type] = parseInt(event.target.value)\r\n        } else {\r\n            let new_grader = { id: grader_id };\r\n            new_grader[type] = parseInt(event.target.value);\r\n            new_grader['assignment_id'] = assignment_id;\r\n            oldGraderEditObject.push(new_grader);\r\n        }\r\n        setGraderEditObject([...oldGraderEditObject]);\r\n    }\r\n\r\n    /**\r\n     * Run the distrubaion algo\r\n     * @param {*} event \r\n     */\r\n    const runDisturbation = useRequest(() => {\r\n        return axios({ url: `/api/distribute`, method: 'POST', data: { assignment_id: assignment_id } })\r\n    }, {\r\n        manual: true,\r\n        onSuccess: (result, params) => {\r\n            fetchGradersData.run(assignment_id);\r\n            alert.success('Assignment distributed');\r\n        },\r\n        onError: (error, params) => {\r\n            fetchGradersData.run(assignment_id);\r\n            alert.error(error.response.data);\r\n        },\r\n        initialData: []\r\n    });\r\n\r\n    /**\r\n     * Sends the grader object to the backend to be be updated in the database \r\n     */\r\n    const updateGraderDetails = useRequest(() => {\r\n        return axios({ url: `/api/update-grader-info`, method: 'post', data: graderEditObject })\r\n    }, {\r\n        manual: true,\r\n        onSuccess: (data) => {\r\n            fetchGradersData.run(assignment_id)\r\n            setGraderEditObject([])\r\n            alert.success('Updated changes');\r\n        },\r\n        onError: (error, params) => {\r\n            alert.error(\"Something happened when saving chages, please try again\");\r\n        }\r\n    });\r\n\r\n\r\n    /**\r\n     * Sets current selected assignment and repulls grader data from DB\r\n     * @param {*} event \r\n     */\r\n    function handleDropdown(event) {\r\n        if (event.target.value != null) {\r\n            fetchGradersData.run(event.target.value)\r\n            setAssignment_id(event.target.value);\r\n        }\r\n    }\r\n\r\n    if (fetchGradersData.loading | updateGraderDetails.loading | fetchAssignmentsList.loading | syncWithCanvas.loading | runDisturbation.loading) return <LoadingIcon />;\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <DropdownButton id=\"dropdown-basic-button\" variant=\"secondary\" className=\"float-left\" title=\"Sync with Canvas\" onSelect={function(evt){syncWithCanvas.run(evt)}}>\r\n                <Dropdown.Item eventKey={'submissions and assignments'} >Sync assignments and submissions</Dropdown.Item>\r\n                <Dropdown.Item eventKey={'graders'}>Sync Graders</Dropdown.Item>\r\n            </DropdownButton>\r\n            <select className=\"float-right\" id=\"selectAssignmentDropdown\" value={assignment_id} onChange={event => handleDropdown(event)}>\r\n                <option >Select assignment</option>\r\n                {\r\n                    assignments.map(assignment =>\r\n                        <option value={assignment.assignment_id} key={assignment.assignment_id}>Progress for {assignment.assignment_name}</option>)\r\n                }\r\n            </select>\r\n            <div className=\"clearfix\"></div>\r\n\r\n            <Table bordered hover id=\"dashboardTable\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>NetId</th>\r\n                        <th>Weights</th>\r\n                        <th>Offsets</th>\r\n                        <th>Cap</th>\r\n                        <th>Assigned</th>\r\n                        {user?.role == \"PROFESSOR\" ? <th>Workload</th> : ''}\r\n                        <th>Progress</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {fetchGradersData.data.map(grader =>\r\n                        <tr key={grader.id}>\r\n                            <td className=\"width-1\">{grader?.name}</td>\r\n                            <td className=\"width-10\">\r\n                                <FormControl defaultValue={grader.weight}\r\n                                    onChange={event => handleUpdate(event, \"weight\", grader.id)}\r\n                                    placeholder=\"Enter\" type=\"number\" min=\"0\" pattern=\"[0-9]*\" />\r\n                            </td>\r\n                            <td className=\"width-10\">\r\n                                <FormControl defaultValue={grader.offset}\r\n                                    onChange={event => handleUpdate(event, \"offset\", grader.id)}\r\n                                    placeholder=\"Enter\" type=\"number\" /></td>\r\n                            <td className=\"width-10\">\r\n                                <FormControl defaultValue={grader.cap}\r\n                                    onChange={event => handleUpdate(event, \"cap\", grader.id)}\r\n                                    placeholder=\"None\" type=\"number\" min=\"0\" pattern=\"[0-9]*\" />\r\n                            </td>\r\n                            <td className=\"width-1\">\r\n                                {grader.total_assigned_for_assignment}\r\n                            </td>\r\n                            {user?.role == \"PROFESSOR\"\r\n                                ?\r\n                                <td className=\"width-1\">\r\n                                    <WorkLoadModal user_id={grader.id} assignment_id={grader.assignment_id} />\r\n                                </td>\r\n                                :\r\n                                ''\r\n                            }\r\n                            <td className=\"width-30\">\r\n                                <ProgressBar animated now={grader.progress} label={grader.num_graded} />\r\n                            </td>\r\n                        </tr>)\r\n                    }\r\n                </tbody>\r\n            </Table>\r\n            <Button className=\"float-right\" disabled={graderEditObject.length != 0} id=\"distribute-btn\" onClick={(runDisturbation.run)}>\r\n                Distribute <span class=\"badge badge-pill badge-light\">{getUngradedsubs.data?.num_unassigned}</span>\r\n            </Button>\r\n                \r\n            {<Button className=\"float-right\" disabled={graderEditObject.length == 0} onClick={updateGraderDetails.run}>Update</Button>}\r\n        </div>\r\n    );\r\n}","import React, {useEffect} from 'react';\r\nimport { useAlert } from 'react-alert';\r\nexport default function Welcome(props){\r\n    const alert = useAlert();\r\n\r\n    /**\r\n     * Get the get params\r\n     * @param {*} parameterName \r\n     */\r\n    function findGetParameter(parameterName) {\r\n        var result = null,\r\n            tmp = [];\r\n        props.location.search\r\n            .substr(1)\r\n            .split('&')\r\n            .forEach(function (item) {\r\n                tmp = item.split('=');\r\n                if (tmp[0] === parameterName) result = decodeURIComponent(tmp[1]);\r\n            });\r\n        return result;\r\n    }\r\n    useEffect(()=>{\r\n        let message = findGetParameter('message');\r\n        console.log(message);\r\n        if(message != null){\r\n            alert.info(message);\r\n        }\r\n    }, []);\r\n    return(\r\n        <div>\r\n            <div className=\"container\">\r\n                <div id=\"welcome_text_conatiner\">\r\n                    <div id=\"textboxcenter\">\r\n                        <p> Welcome to Canvas Grading Extension</p>\r\n                        <p>Please login using your Cornell email account</p>\r\n                        <a href={`/auth/google`} id=\"login-link\">Login</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, {useEffect, useCallback, useState} from 'react';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Button from 'react-bootstrap/Button';\r\nimport {useContext} from 'react';\r\nimport { useRequest } from '@umijs/hooks';\r\nimport { useAlert } from 'react-alert';\r\nimport config from '../config';\r\nimport {UserContext} from '../userContext';\r\nimport axios from 'axios';\r\nimport LoadingIcon from './LoadingIcon';\r\n\r\nexport default function Settings(props){\r\n    const [bearToken, setBearToken] = useState(null);\r\n    const [deleteCourseConfirm, setDeleteCourseConfirm] = useState();\r\n    const [courseId, setCourseId] = useState(null);\r\n    const alert = useAlert();\r\n    let user = useContext(UserContext);\r\n\r\n    /**\r\n     * Make request update the token\r\n     */\r\n    const updateCanvasToken = useRequest(()=>{\r\n        return axios({\r\n        url:`/api/update-canvas-token`,\r\n        method:'post',\r\n        data:{'token': bearToken}\r\n        })}, {\r\n        manual: true,\r\n        onSuccess: (response, params)=>{\r\n            alert.success(response.data);\r\n        },\r\n        onError: (error, params) => {\r\n            alert.error(error.response.data)\r\n        },\r\n    });\r\n\r\n    /**\r\n     * Make request update the token\r\n     */\r\n    const resetCourse = useRequest(()=>{\r\n        return axios({\r\n        url:`/api/delete-data-base`,\r\n        })}, {\r\n        manual: true,\r\n        onSuccess: (response, params)=>{\r\n            alert.success(response.data);\r\n        },\r\n        onError: (error, params) => {\r\n            alert.error(\"Something went wrong when deleting the course\")\r\n        },\r\n    });\r\n\r\n    /**\r\n     * Update course id \r\n     */\r\n    const updateCourse = useRequest(()=>{\r\n        return axios({\r\n        url:`/api/update-course-id`,\r\n        method:'post',\r\n        data: {\"course_id\":courseId}\r\n        })}, {\r\n        manual: true,\r\n        onSuccess: (response, params)=>{\r\n            alert.success(response.data);\r\n        },\r\n        onError: (error, params) => {\r\n            alert.error(error.response.data)\r\n        },\r\n    });\r\n\r\n    /**\r\n     * Update course id \r\n     */\r\n    const getCourseId = useRequest(()=>{\r\n        return axios({\r\n        url:`/api/get-course-id`\r\n        })}, {\r\n        formatResult:(result)=>{\r\n            return result.data\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Make sure the user knows that this is undoable\r\n     * @param {*} event \r\n     */\r\n    function handleCourseReset(){\r\n        if(deleteCourseConfirm == \"DELETE ALL COURSE DATA\"){\r\n            resetCourse.run()\r\n        }else{\r\n            alert.info('Your confirm text is incorrect, course not deleted')\r\n        }\r\n    }\r\n\r\n    function updateToken(){\r\n        if(bearToken != null){\r\n            updateCanvasToken.run()\r\n        }else{\r\n            alert.info('Please enter a token first')\r\n        }\r\n    }\r\n\r\n    if (updateCanvasToken.loading) return <LoadingIcon />;\r\n    \r\n    return(\r\n        <div className=\"container\">\r\n            <section class=\"setting\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-8\">\r\n                        <h4>Your canvas token</h4>\r\n                        <p>Vist Account in account in Canvas then go into settings to generate a token</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-8\">\r\n                        <FormControl onChange={(event)=>setBearToken(event.target.value)} placeholder={'Paste Canvas token here'} />\r\n                    </div>\r\n                    <div className=\"col-sm-4\">\r\n                        <Button variant=\"primary\" onClick={updateToken}>Update</Button>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            {user?.role == \"PROFESSOR\"?\r\n            <section class=\"setting\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-8\">\r\n                        <h4>Course ID</h4>\r\n                        <p>Link your course ID from Canvas</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-8\">\r\n                        <FormControl defaultValue={getCourseId?.data?.course_id} onChange={(event)=>setCourseId(event.target.value)} />\r\n                    </div>\r\n                    <div className=\"col-sm-4\">\r\n                        <Button variant=\"primary\" onClick={updateCourse.run}>Link course</Button>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            :false\r\n            }\r\n            <section class=\"setting\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-8\">\r\n                        <h4>Reset course data</h4>\r\n                        <p>This will remove graders, submissions and assignments</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-8\">\r\n                        <FormControl  onChange={(event)=>setDeleteCourseConfirm(event.target.value)} placeholder={'This change cannot be undone. Confirm by DELETE ALL COURSE DATA to continue'} />\r\n                    </div>\r\n                    <div className=\"col-sm-4\">\r\n                        <Button variant=\"danger\" onClick={handleCourseReset}>Reset course</Button>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport GraderDashboard from './components/grader/GraderDashboard';\r\nimport DetailedAssignmentView from './components/grader/DetailedAssignmentView';\r\nimport NavigationMenu from './components/NavigationMenu';\r\nimport Dashboard from './components/Professor/Dashboard';\r\nimport Welcome from './components/Welcome';\r\nimport Settings from './components/Settings';\r\nimport config from './config';\r\nimport { UserContext } from './userContext';\r\nimport axios from 'axios';\r\n// import PrivateRoute from './components/PrivateRoute'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'; // bootstrap\r\nimport './index.css';\r\n\r\nfunction App() {\r\n    const [user, setUser] = useState(null);\r\n    useEffect(() => {\r\n        axios({ url: `auth/user` }).then((response) => {\r\n            if (response != undefined) {\r\n                setUser(response.data.user);\r\n            }\r\n        }).catch();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <UserContext.Provider value={user}>\r\n                <BrowserRouter>\r\n                    <NavigationMenu />\r\n                    <Switch>\r\n                        <Route path=\"/\" component={Welcome} exact/>\r\n                        <Route exact path=\"/assignments\" component={GraderDashboard} />\r\n                        <Route path=\"/assignments/:assignment_id/:student_id\" exact component={DetailedAssignmentView} />\r\n                        <Route path=\"/dashboard\" component={Dashboard} />\r\n                        <Route path=\"/settings\" component={Settings} />\r\n                    </Switch>\r\n                </BrowserRouter>\r\n            </UserContext.Provider>\r\n        </div>\r\n    );\r\n}\r\nexport default App;","import React from 'react';\r\nimport './index.css';\r\nimport {render} from 'react-dom';\r\nimport { transitions, positions, Provider as AlertProvider } from 'react-alert';\r\nimport AlertTemplate from 'react-alert-template-basic';\r\nimport App from './App';\r\nimport axios from 'axios';\r\n\r\nconst options = {\r\n    position: positions.BOTTOM_CENTER,\r\n    timeout: 5000,\r\n    transition: transitions.FADE\r\n};\r\n\r\n// add the cookies to every request going out \r\naxios.interceptors.request.use((config) => {\r\n    config.withCredentials = true;\r\n    config.header = {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',\r\n        'Access-Control-Allow-Credentials': true\r\n    };\r\n    return config;\r\n}, (error) => {\r\n    return Promise.reject(error);\r\n});\r\n\r\n\r\n// Add a response interceptor\r\naxios.interceptors.response.use((response) => {\r\n    return response;\r\n}, (error) => {\r\n    console.log(error.response);\r\n    if(error.response != undefined){\r\n        if(error.response.status == 401){\r\n            if(window.location.pathname != '/'){\r\n                window.location = '/?message=Either your session has ended or you are not logged in';\r\n            }\r\n        }\r\n    }\r\n    return Promise.reject(error);\r\n});\r\n\r\nconst Root = () => (\r\n    <AlertProvider template={AlertTemplate} {...options}>\r\n        <App />\r\n    </AlertProvider>\r\n);\r\n \r\nrender(<Root />, document.getElementById('root'));\r\n","module.exports = {\r\n    header:{\r\n        credentials: 'include',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Credentials': true\r\n        }\r\n    },\r\n    backend:{\r\n        url:''\r\n    }\r\n\r\n};"],"sourceRoot":""}